{"version":3,"sources":["components/app-header/index.js","components/app-header/app-header.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/todo-list-item/todo-list-item.js","components/todo-list/index.js","components/todo-list/todo-list.js","components/item-status-filter/index.js","components/item-status-filter/item-status-filter.js","components/item-add-form/index.js","components/item-add-form/item-add-form.js","components/app/index.js","components/app/app.js","index.js"],"names":["AppHeader","toDo","done","className","SearchPanel","state","term","onSearchChange","e","target","value","setState","props","placeholder","this","onChange","Component","TodoListItem","label","onDeleted","onToggleImportant","onToggleDone","important","classNames","onClick","type","TodoList","todos","elements","map","item","id","itemProps","ItemStatusFilter","buttons","name","filter","onFilterChange","clazz","ItemAddForm","onLabelChange","onSubmit","preventDefault","onItemAdded","App","maxId","todoData","createTodoItem","deleteItem","idx","findIndex","el","slice","addItem","text","newItem","toggleProperty","arr","propName","oldItem","items","length","toLowerCase","indexOf","visibleItems","search","doneCount","todoCount","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8acf8c26.chunk.js","sourcesContent":["import AppHeader from \"./app-header\";\n\nexport default AppHeader;","import React from \"react\";\nimport './app-header.css';\n\nconst AppHeader = ({toDo, done}) => {\n    return (\n        <div className=\"app-header d-flex justify-content-between\">\n            <h1>Todo List</h1>\n            <h2>{toDo} more to do, {done} done</h2>\n        </div>\n    );\n};\n\nexport default AppHeader;","import SearchPanel from \"./search-panel\";\n\nexport default SearchPanel;","import React, {Component} from \"react\";\nimport './search-panel.css'\n\nexport default class SearchPanel extends Component {\n\n    state = {\n        term: ''\n    };\n\n    onSearchChange = (e) => {\n        const term = e.target.value;\n        this.setState({ term });\n        this.props.onSearchChange(term)\n    };\n\n    render() {\n        return (\n            <input\n                className=\"search-input\"\n                placeholder=\"search\"\n                value={this.state.term}\n                onChange={this.onSearchChange}\n            />\n        )\n    }\n}\n\n","import React, {Component} from \"react\";\nimport './todo-list-item.css';\n\nexport default class TodoListItem extends Component {\n\n    render() {\n        const { label, onDeleted,\n                onToggleImportant,\n                onToggleDone,\n                important, done } = this.props;\n\n        let classNames = 'todo-list-item';\n        if (done) {\n            classNames += ' done';\n        }\n\n        if (important) {\n            classNames += ' important';\n        }\n\n        return (\n            <span className={ classNames + ' d-flex justify-content-between'}>\n                <span\n                    className=\"todo-list-item-label\"\n                    onClick={ onToggleDone }\n                >\n                    { label }\n                </span>\n                <span>\n                    <button type=\"button\"\n                            className=\"btn btn-outline-success btn-sm\"\n                            onClick={ onToggleImportant }\n                    >\n                    <i className=\"fa fa-exclamation\" />\n                </button>\n                <button type=\"button\"\n                        className=\"btn btn-outline-danger btn-sm\"\n                        onClick={onDeleted}\n                >\n                    <i className=\"fa fa-trash-o\" />\n                </button>\n                </span>\n            </span>\n        );\n    }\n}","import TodoList from \"./todo-list\";\n\nexport default TodoList;","import React from \"react\";\n\nimport TodoListItem from \"../todo-list-item/todo-list-item\";\nimport './todo-list.css';\n\nconst TodoList = ({ todos,\n                      onDeleted,\n                      onToggleImportant,\n                      onToggleDone\n                  }) => {\n\n    const elements = todos.map((item) => {\n\n        const { id, ...itemProps} = item; // чтобы id передать только в key,\n        return (                          // а остальное - в <TodoListItem />\n            <li key={id} className=\"list-group-item\">\n                <TodoListItem\n                    { ...itemProps }\n                    onDeleted={() => onDeleted(id)}\n                    onToggleImportant={() => onToggleImportant(id)}\n                    onToggleDone={() => onToggleDone(id)}\n                />\n            </li>\n        )\n    });\n\n    return (\n        <ul className=\"list-group todo-list\">\n            { elements }\n        </ul>\n    )\n}\n\nexport default TodoList;","import ItemStatusFilter from \"./item-status-filter\";\n\nexport default ItemStatusFilter;","import React, {Component} from 'react';\nimport './item-status-filter.css';\n\nexport default class ItemStatusFilter extends Component {\n\n    buttons = [\n        { name: 'all', label: 'All'},\n        { name: 'active', label: 'Active'},\n        { name: 'done', label: 'Done'}\n    ];\n\n    render() {\n\n        const { filter, onFilterChange } = this.props;\n\n        const buttons = this.buttons.map(({name, label}) => {\n\n            const isActive = filter === name;\n            const clazz = isActive ? 'btn-info' : 'btn-outline-secondary';\n\n            return (\n                <button type=\"button\"\n                        className={`btn ${clazz}`}\n                        key={name}\n                        onClick={() => onFilterChange(name)}\n                >\n                    {label}\n                </button>\n            )\n        });\n\n        return (\n            <div className=\"btn-group\">\n                { buttons }\n            </div>\n        )\n    }\n}","import ItemAddForm from \"./item-add-form\";\n\nexport default ItemAddForm;","import React, {Component} from 'react';\nimport './item-add-form.css';\n\nexport default class ItemAddForm extends Component {\n\n    state = {\n        label: ''\n    }\n    onLabelChange = (e) => {\n        this.setState({\n            label: e.target.value\n        });\n    };\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.onItemAdded(this.state.label);\n         this.setState({\n             label: ''\n         });\n    };\n\n    render() {\n        return (\n            <form className=\"item-add-form d-flex\"\n                  onSubmit={this.onSubmit}>\n\n                <input type=\"text\"\n                       className=\"form-control\"\n                       onChange={this.onLabelChange}\n                       placeholder=\"What needs to be done\"\n                       value={this.state.label} />\n                <button\n                    className=\"btn btn-outline-secondary w-25\"\n                >\n                    Add Item\n                </button>\n            </form>\n        )\n    }\n}","import App from \"./app\";\n\nexport default App;","import React, {Component} from 'react';\n\nimport AppHeader from \"../app-header\";\nimport SearchPanel from \"../search-panel\";\nimport TodoList from \"../todo-list\";\nimport ItemStatusFilter from \"../item-status-filter\";\nimport ItemAddForm from \"../item-add-form\";\n\nimport './app.css';\n\nexport  default class App extends Component {\n\n    maxId = 100;\n    state = {\n        todoData: [\n            this.createTodoItem('Drink Coffee'),\n            this.createTodoItem('Make Awesome App'),\n            this.createTodoItem('Have a lunch')\n        ],\n        term: '',\n        filter: 'all' // active, all, done\n    };\n\n    createTodoItem(label) {\n        return {\n            label,\n            important: false,\n            done: false,\n            id: this.maxId++\n        }\n    }\n\n    deleteItem = (id) => {\n       this.setState(({todoData}) => {\n\n           const idx = todoData.findIndex((el) => el.id === id);\n           // setState не должен изменять текущий state!!!\n           const newArray = [\n               ...todoData.slice(0, idx),\n               ...todoData.slice(idx + 1) // не изменяя старый массив\n           ];\n           return {\n               todoData: newArray\n           };\n       });\n    };\n\n    addItem = (text) => {\n      // generate id\n        const newItem = this.createTodoItem(text)\n      // add element in array\n        this.setState(({todoData}) => {\n            const newArr = [\n                ...todoData,\n                newItem\n            ];\n            return {\n                todoData: newArr\n            }\n        });\n    };\n\n    toggleProperty(arr, id, propName) {\n        const idx = arr.findIndex((el) => el.id === id);\n\n        // 1. update object\n        const oldItem = arr[idx];\n        const newItem = {...oldItem,\n            [propName]: !oldItem[propName]}; //теперь есть новый элемент, копия старого, кроме свойства done\n\n        // 2. construct new array\n        return [\n            ...arr.slice(0, idx),\n            newItem,\n            ...arr.slice(idx + 1)\n        ];\n    }\n\n    onToggleImportant = (id) => {\n        this.setState(({ todoData }) => {\n            return {\n                todoData: this.toggleProperty(todoData, id, 'important')\n            };\n        });\n    };\n\n    onToggleDone = (id) => {\n        this.setState(({ todoData }) => {\n            return {\n                todoData: this.toggleProperty(todoData, id, 'done')\n            };\n        });\n    };\n\n    onSearchChange = (term) => {\n        this.setState({ term });\n    };\n\n    onFilterChange = (filter) => {\n        this.setState({ filter });\n    };\n\n    search(items, term) {\n        if (term.length === 0) {\n            return items;\n        }\n\n        return items.filter((item) => {\n            return item.label\n                .toLowerCase()\n                .indexOf(term.toLowerCase()) > -1;\n        });\n    };\n\n    filter(items, filter) {\n        switch (filter) {\n            case 'all':\n                return items;\n            case 'active':\n                return items.filter((item) => !item.done);\n            case 'done':\n                return items.filter((item) => item.done);\n            default:\n                return items;\n        }\n    }\n\n   render() {\n\n       const { todoData, term, filter } = this.state;\n       const visibleItems = this.filter(\n           this.search(todoData, term), filter);\n       const doneCount = todoData\n                        .filter((el) => el.done).length;\n       const todoCount = todoData.length - doneCount;\n\n       return (\n           <div className=\"todo-app\">\n               <AppHeader toDo={todoCount} done={doneCount} />\n               <div className=\"top-panel d-flex\">\n                   <SearchPanel\n                        onSearchChange = {this.onSearchChange} />\n                   <ItemStatusFilter\n                        filter={filter}\n                        onFilterChange={this.onFilterChange} />\n               </div>\n\n               <TodoList\n                   todos={ visibleItems }\n                   onDeleted={ this.deleteItem }\n                   onToggleImportant={this.onToggleImportant}\n                   onToggleDone={this.onToggleDone}\n               />\n\n               <ItemAddForm onItemAdded={this.addItem} />\n           </div>\n       );\n   }\n\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/app'\n\nReactDOM.render(<App />,\n    document.getElementById('root'));"],"sourceRoot":""}